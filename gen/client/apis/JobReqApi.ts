/* tslint:disable */
/* eslint-disable */
/**
 * TGMon API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TypesJobReqDoc,
} from '../models/index';
import {
    TypesJobReqDocFromJSON,
    TypesJobReqDocToJSON,
} from '../models/index';

export interface ApiJobReqIdDeleteRequest {
    id: string;
}

export interface ApiJobReqPostRequest {
    data: TypesJobReqDoc;
}

/**
 * 
 */
export class JobReqApi extends runtime.BaseAPI {

    /**
     * List job requests
     */
    async apiJobReqGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TypesJobReqDoc>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/api/jobReq/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TypesJobReqDocFromJSON));
    }

    /**
     * List job requests
     */
    async apiJobReqGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TypesJobReqDoc>> {
        const response = await this.apiJobReqGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete job request
     */
    async apiJobReqIdDeleteRaw(requestParameters: ApiJobReqIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiJobReqIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/api/jobReq/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete job request
     */
    async apiJobReqIdDelete(requestParameters: ApiJobReqIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiJobReqIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create job request
     */
    async apiJobReqPostRaw(requestParameters: ApiJobReqPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TypesJobReqDoc>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling apiJobReqPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/api/jobReq/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TypesJobReqDocToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TypesJobReqDocFromJSON(jsonValue));
    }

    /**
     * Create job request
     */
    async apiJobReqPost(requestParameters: ApiJobReqPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TypesJobReqDoc> {
        const response = await this.apiJobReqPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
