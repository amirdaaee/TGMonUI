/* tslint:disable */
/* eslint-disable */
/**
 * TGMon API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WebMediaListResType,
  WebMediaReadResType,
} from '../models/index';
import {
    WebMediaListResTypeFromJSON,
    WebMediaListResTypeToJSON,
    WebMediaReadResTypeFromJSON,
    WebMediaReadResTypeToJSON,
} from '../models/index';

export interface ApiMediaGetRequest {
    page?: number;
}

export interface ApiMediaIdDeleteRequest {
    id: string;
}

export interface ApiMediaIdGetRequest {
    id: string;
}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI {

    /**
     * List media
     */
    async apiMediaGetRaw(requestParameters: ApiMediaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebMediaListResType>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/api/media/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebMediaListResTypeFromJSON(jsonValue));
    }

    /**
     * List media
     */
    async apiMediaGet(requestParameters: ApiMediaGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebMediaListResType> {
        const response = await this.apiMediaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete media
     */
    async apiMediaIdDeleteRaw(requestParameters: ApiMediaIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiMediaIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/api/media/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete media
     */
    async apiMediaIdDelete(requestParameters: ApiMediaIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiMediaIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Read media
     */
    async apiMediaIdGetRaw(requestParameters: ApiMediaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebMediaReadResType>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiMediaIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/api/media/{id}/`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebMediaReadResTypeFromJSON(jsonValue));
    }

    /**
     * Read media
     */
    async apiMediaIdGet(requestParameters: ApiMediaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebMediaReadResType> {
        const response = await this.apiMediaIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
