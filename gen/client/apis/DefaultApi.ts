/* tslint:disable */
/* eslint-disable */
/**
 * TGMon API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  WebInfoGetResType,
  WebLoginPostReqType,
  WebLoginPostResType,
  WebRandomMediaGetResType,
} from '../models/index';
import {
    WebInfoGetResTypeFromJSON,
    WebInfoGetResTypeToJSON,
    WebLoginPostReqTypeFromJSON,
    WebLoginPostReqTypeToJSON,
    WebLoginPostResTypeFromJSON,
    WebLoginPostResTypeToJSON,
    WebRandomMediaGetResTypeFromJSON,
    WebRandomMediaGetResTypeToJSON,
} from '../models/index';

export interface ApiAuthLoginPostRequest {
    data: WebLoginPostReqType;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Authenticate user and return a token
     * Login
     */
    async apiAuthLoginPostRaw(requestParameters: ApiAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebLoginPostResType>> {
        if (requestParameters['data'] == null) {
            throw new runtime.RequiredError(
                'data',
                'Required parameter "data" was null or undefined when calling apiAuthLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/login/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebLoginPostReqTypeToJSON(requestParameters['data']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebLoginPostResTypeFromJSON(jsonValue));
    }

    /**
     * Authenticate user and return a token
     * Login
     */
    async apiAuthLoginPost(requestParameters: ApiAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebLoginPostResType> {
        const response = await this.apiAuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Session data
     */
    async apiAuthSessionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebLoginPostResType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/api/auth/session/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebLoginPostResTypeFromJSON(jsonValue));
    }

    /**
     * Session data
     */
    async apiAuthSessionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebLoginPostResType> {
        const response = await this.apiAuthSessionGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Info summary
     */
    async apiInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebInfoGetResType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/api/info/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebInfoGetResTypeFromJSON(jsonValue));
    }

    /**
     * Info summary
     */
    async apiInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebInfoGetResType> {
        const response = await this.apiInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get random media
     */
    async apiMediaRandomGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebRandomMediaGetResType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/api/media/random/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WebRandomMediaGetResTypeFromJSON(jsonValue));
    }

    /**
     * Get random media
     */
    async apiMediaRandomGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebRandomMediaGetResType> {
        const response = await this.apiMediaRandomGetRaw(initOverrides);
        return await response.value();
    }

}
